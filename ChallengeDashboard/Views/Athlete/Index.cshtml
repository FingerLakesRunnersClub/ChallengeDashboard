@using FLRC.ChallengeDashboard
@model AthleteViewModel

<h2>@Model.Athlete.Name</h2>

<table class="table table-bordered table-striped table-sm text-center f-left">
    <thead>
    <tr>
        <th>Age</th>
        <th>Team</th>
        <th>Overall Points</th>
        <th>Total Miles</th>
    </tr>
    </thead>
    <tbody>
    <tr>
            <td>@Model.Athlete.Age</td>
            <td>@Model.Athlete.Team.Display (@Model.TeamResults.Rank.Display)</td>
            <td>@Model.OverallPoints.Value.Display (@Model.OverallPoints.Rank.Display)</td>
            <td>@Model.OverallMiles.Value.ToString("F1") (@Model.OverallMiles.Rank.Display)</td>
        </tr>
    </tbody>
</table>

<div class="row">
    @foreach (var course in Model.AllResults.Where(r => r.Value.Any()))
    {
        <div class="col-12 col-md-6">
            @await Html.PartialAsync("CourseInfo", course.Key)

            <table class="table table-striped table-bordered table-sm text-center">
                <thead>
                    <tr>
                        <th>Fastest Time</th>
                        <th>Average Time (Top @course.Key.AverageThreshold(Model.Athlete.Category))</th>
                        <th># of Runs</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @Model.Fastest[course.Key].Value.Display (@Model.Fastest[course.Key].Rank.Display)
                        </td>
                        <td>
                            @if (Model.Average[course.Key] != null)
                            {
                                @(Model.Average[course.Key].Value.Display + " (" + Model.Average[course.Key].Rank.Display + ")") 
                            }
                            else
                            {
                                @("(not enough runs)")
                            }    
                        </td>
                        <td>
                            @Model.Runs[course.Key].Value (@Model.Runs[course.Key].Rank.Display)
                        </td>
                    </tr>
                </tbody>
            </table>

            <details>
                <summary>All Runs</summary>
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in course.Value.OrderBy(r => r.StartTime))
                        {
                            <tr>
                                <td>
                                    @result.StartTime?.ToString("MM/dd/yyyy")
                                </td>
                                <td>
                                    @result.Duration.Display
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </details>
        </div>
    }
</div>